{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","robot","id","name","email","CardList","robots","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAAAC,GAClB,OAAO,sBAAKC,UAAU,iBAAf,UACL,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,4BACpB,mCAAML,EAAMI,MAAME,KAAlB,OACA,kCAAKN,EAAMI,MAAMG,MAAjB,WCHSC,G,MAAW,SAACR,GACvB,OAAO,sBAAKC,UAAU,YAAf,cACHD,EAAMS,OAAOC,KAAI,SAAAN,GAAK,OACpB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,YCJZM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCmCAG,G,wDApCb,aAAe,IAAD,8BACZ,gBAaFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,OAAQ,GACRU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,OAAQkB,S,oBAO3C,WAAU,IAAD,EACyBC,KAAKN,MAA7Bb,EADD,EACCA,OAAQU,EADT,EACSA,YACVU,EAAiBpB,EAAOqB,QAAO,SAAA1B,GAAK,OACxCA,EAAME,KAAKyB,cAAcC,SAASb,EAAYY,kBAEhD,OACE,sBAAK9B,UAAU,MAAf,UACE,6CACA,cAAC,EAAD,CACEW,YAAY,gBACZC,aAAee,KAAKf,eAEtB,cAAC,EAAD,CAAUJ,OAAQoB,W,GAhCRI,cCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5da52eb1.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => {\n  return <div className='card-container'>\n    <img alt='robot' src={`https://robohash.org/${props.robot.id}?set=set3&size=180x180`}></img>\n    <h2> {props.robot.name} </h2>\n    <p> {props.robot.email} </p>\n  </div>;\n}","import React from 'react';\nimport { Card } from '../card/card.component';\nimport './card-list.styles.css'\n\nexport const CardList = (props) => {\n  return <div className='card-list'> {\n      props.robots.map(robot => (\n        <Card key={robot.id} robot={robot} />\n      ))\n    }\n  </div>;\n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className='search'\n    type='search'\n    placeholder={ placeholder }\n    onChange={ handleChange } />\n)","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value })\n  }\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter(robot =>\n      robot.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <div className=\"App\">\n        <h1>Robot Cards</h1>\n        <SearchBox\n          placeholder='search robots'\n          handleChange={ this.handleChange }\n        />\n        <CardList robots={filteredRobots} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}